# **Wine Quality Prediction**

# **Objective**
The objective of the project is to develop a model that predicts the Quality of Wine. With the Wine Quality Prediction project, we aim to create a dependable machine learning model that can forecast wine quality with accuracy and precision. We'll examine a vast collection of diverse wine samples by analyzing multiple physicochemical properties combined with sensory attributes. Our model's output provides a credible appraisal for analyzing or selecting wines by producers or even consumers alike- assisting them in making more informed decision-making choices regarding production and selection processes specifically catered towards their needs. Our ultimate target involves developing an innovative predictive tool equipped with features for effective evaluation & enhancement thereby uplifting not only consumer satisfaction but also raising industry standards for competitiveness.

# **Data Source**
The data for this project can be obtained from the following source: Data Source:[link text](https://raw.githubusercontent.com/21P31A05A5/dataset/main/winequality-red.csv)

# **Import Library**


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# **Import Data**

wine_dataset = pd.read_csv('https://github.com/21P31A05A5/dataset/raw/main/winequality-red.csv')

# Describe Data

wine_dataset.head()
wine_dataset.info()
wine_dataset.describe()

wine_dataset.isnull().sum()

# **Data Analysis and Visulaization**

wine_dataset.describe()

  sns.catplot(x='quality', data = wine_dataset, kind = 'count')

plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y = 'volatile acidity', data = wine_dataset)

plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y = 'citric acid', data = wine_dataset)

# **Correlation**
1. **Positive Correlation**

2. Negative Correlation

correlation = wine_dataset.corr()

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt = '.1f', annot = True, annot_kws={'size':8}, cmap = 'Blues')

# **Data Preprocessing and Define Target Variable (y) and Feature Variables (X)**

X = wine_dataset.drop('quality',axis=1)


print(X)

**Label Binarizaton**

Y = wine_dataset['quality'].apply(lambda y_value: 1 if y_value>=7 else 0)


print(Y)

# **Train Test Split**

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

print(Y.shape, Y_train.shape, Y_test.shape)

# **Modeling**

model = RandomForestClassifier()

model.fit(X_train, Y_train)

# **Model Evaluation**

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy : ', test_data_accuracy)

# **Prediction**

input_data = (7.5,0.5,0.36,6.1,0.071,17.0,102.0,0.9978,3.35,0.8,10.5)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
  print('Good Quality Wine\n')
else:
  print('Bad Quality Wine\n')

# **Explaination**

1. **Import Library:** This step imports the necessary libraries that will be used throughout the project, such as pandas for data manipulation, numpy for numerical operations, matplotlib and seaborn for data visualization, and scikit-learn for machine learning tasks.

2. **Import Data:** This step reads the dataset from the provided URL using pandas' read_csv() function and stores it in the variable data.

3. **Describe Data:** This step provides an overview of the dataset. data.head() displays the first few rows of the dataset, data.info() provides information about the columns and data types, and data.describe() gives a statistical summary of the dataset, including count, mean, standard deviation, minimum, and maximum values.

4. **Data Visualization:** This step involves visualizing the data to gain insights and understand its distribution. The example provided plots a histogram of the 'Age' column using matplotlib, which helps visualize the age distribution of the customers.

5. **Data Preprocessing:** This step involves handling missing values and categorical variables. The example shows two common preprocessing tasks. First, dropna() is used to remove rows with missing values. Second, pd.get_dummies() is used to convert categorical variables into binary dummy variables, dropping the first category to avoid multicollinearity.

6. **Define Target Variable (y) and Feature Variables (X):** This step separates the dataset into the target variable (dependent variable) and feature variables (independent variables). The example assigns all columns except 'Exited' to X, and 'Exited' column to y.

7. **Train Test Split:** This step splits the data into training and testing datasets. The example uses train_test_split() function from scikit-learn to randomly split the data into training and testing sets, with a test size of 20% of the total dataset.

8. **Modeling:** This step involves building a machine learning model on the training data. The example uses logistic regression from scikit-learn as the modeling technique. It also includes data scaling using StandardScaler() to standardize the numerical features before training the model.

9. **Model Evaluation:** This step evaluates the trained model using evaluation metrics. The example shows how to calculate the confusion matrix and accuracy score for the predicted values (y_pred) compared to the actual values (y_test).

10. Prediction: This step demonstrates how to use the trained model to make predictions on new data. The example creates a new DataFrame (new_data) with some example input values and scales it using the same StandardScaler() object. Then, it uses the trained model to predict the wine quality outcome for the new data.
